// Define the time period of interest
var startDate = '2023-03-01';  // Adjust the start date as needed
var endDate = '2023-09-30';    // Adjust the end date as needed

// Use the geometry drawn in the Earth Engine Code Editor
var areaOfInterest = geometry;

// Center the map at the area of interest
Map.centerObject(areaOfInterest, 12);

// Add the area of interest to the map for visualization
Map.addLayer(areaOfInterest, {color: 'red'}, 'Area of Interest');

// Load the Sentinel-2 image collection
var sentinel2 = ee.ImageCollection('COPERNICUS/S2_SR')
  .filterBounds(areaOfInterest)
  .filterDate(startDate, endDate)
  .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE', 25));

// Calculate NDVI for each image in the collection
var ndviCollection = sentinel2.map(function(image) {
  var ndvi = image.normalizedDifference(['B8', 'B4']).rename('NDVI');
  return ndvi.copyProperties(image, image.propertyNames());
});

// Get the median NDVI image over the time period
var medianNdvi = ndviCollection.median();

// Define visualization parameters for NDVI
var ndviParams = {
  min: 0,
  max: 1,
  palette: ['white', 'green']
};

// Add the median NDVI layer to the map
Map.addLayer(medianNdvi.clip(areaOfInterest), ndviParams, 'Median NDVI');

// Create a time series chart of NDVI over the area
var ndviChart = ui.Chart.image.series({
  imageCollection: ndviCollection,
  region: areaOfInterest,
  reducer: ee.Reducer.mean(),
  scale: 10 // Adjust scale as needed
}).setOptions({
  title: 'NDVI Over Time',
  vAxis: {title: 'NDVI'},
  hAxis: {title: 'Date'},
  lineWidth: 2,
  pointSize: 4
});
print(ndviChart);

// Optional: Create an NDVI animation over the area
// Define visualization parameters for the animation
var visParams = {
  min: 0,
  max: 1,
  palette: ['white', 'green']
};

// Create RGB visualization images for the animation frames
var ndviVisCollection = ndviCollection.map(function(image) {
  return image.clip(areaOfInterest).visualize(visParams).set({
    'system:time_start': image.get('system:time_start')
  });
});

// Define GIF animation parameters
var gifParams = {
  region: areaOfInterest.bounds(),
  dimensions: 600,
  framesPerSecond: 2,
  format: 'gif'
};

// Generate and display the GIF animation URL
print(ui.Thumbnail(ndviVisCollection, gifParams));
